@page "/book/{Id}"
@using QueueSafe.Shared
@inject IStoreRemote StoreRepo
@inject IBookingRemote BookingRepo
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject CurrieTechnologies.Razor.SweetAlert2.SweetAlertService Swal
@using static CurrieTechnologies.Razor.SweetAlert2.SweetAlertIcon

@if (store != null)
{
    <div class="row">
        <div class="col-sm-12">
            <h1 style="text-align: center;">@store.Name</h1>
        </div>
        <div class="col-sm-12">
            <h2 style="text-align: center;">Next estimated available time</h2>
        </div>
        <div class="col-sm-12">
            <h2 style="text-align: center;">Current stress level</h2>
        </div>
        <div class="col-sm-12" style="text-align: center;">
            <StoreStressBar Store=@store />
        </div>
        <div class="col-sm-12" style="margin: auto;">
            <button class="btn btn-primary" @onclick="CreateBooking">Book this time</button>
        </div>
    </div>  
}
@code
{
    [Parameter]
    public string Id { get; set; }

    private StoreDetailsDTO store;

    private int bookingAmount;

    private double ratio;
    protected override async Task OnInitializedAsync()
    {
        store = await StoreRepo.GetStore(Id); 
        bookingAmount = store.Bookings.Select(booking => booking).Count();

        if (store.Capacity != 0)
        {
            ratio = (double)bookingAmount / (double)store.Capacity;

        }
    }


    private async void CreateBooking()
    {        
        BookingListDTO booking = await BookingRepo.CreateBooking(Id);
        await LocalStorage.SetItemAsync("currentBooking", booking.Token); // Save in users local storage
        await Swal.FireAsync("Booked!", "Booking created successfully", Success);    
    }
}