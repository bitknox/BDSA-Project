@page "/my"
@using QueueSafe.Shared
@inject IStoreRemote StoreRepo
@inject IBookingRemote BookingRepo
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject CurrieTechnologies.Razor.SweetAlert2.SweetAlertService Swal
@using static CurrieTechnologies.Razor.SweetAlert2.SweetAlertIcon
@using Syncfusion.Blazor.BarcodeGenerator

@if (Token != null)
{
    <div class="content-container">
        <div class="row">
            <div class="col-sm-12">
                <h1 style="text-align: center; margin-top: 5px;">Reservation</h1>
                <h3 style="text-align: center;">@store.Name</h3>
            </div>
            <div class="col-sm-12">
                <h4 style="text-align: center; margin-top: 5px;"><QueuePosition store=@store /></h4>
            </div>
            <EstimatedTime store=@store/>            
            <div class="col-sm-12" style="text-align: center; margin: auto;">
                @if (store != null)
                { 
                    <StoreStressBar store=@store/>
                }
            </div>
            <div class="col-sm-12">
                <div class="qrcode"> 
                <SfQRCodeGenerator Width="300px" Height="300px" Value=@Token>
                    <QRCodeGeneratorDisplayText Visibility=false></QRCodeGeneratorDisplayText>
                </SfQRCodeGenerator>
                </div>
            </div>
            <div class="col-sm-12" style="text-align: center;">
                <button disabled=@store.IsFull() class="btn btn-primary" @onclick="ScanBooking">Scan</button>
            </div>
        </div>
    </div>
}

@code
{
    private BookingDetailsDTO booking;

    private StoreDetailsDTO store;
    
    private string Token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Token = await LocalStorage.GetItemAsync<string>("currentBooking");
            booking = await BookingRepo.GetBooking(Token);
            store = await StoreRepo.GetStore(booking.StoreId.ToString());
            StateHasChanged();
        }
    }

    private async void ScanBooking()
    {
        var update = new BookingUpdateDTO
        {
            State = BookingState.Active,
            Token = Token
        };

        var result = await BookingRepo.UpdateBooking(Token, update);
        if (result)
        {
            await Swal.FireAsync("Scanned!", "You can enter the store!", Success);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            await Swal.FireAsync("Error!", "There was a problem!", Error);
        }
    }
}
