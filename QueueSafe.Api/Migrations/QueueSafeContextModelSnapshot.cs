// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QueueSafe.Entities;

namespace QueueSafe.Api.Migrations
{
    [DbContext(typeof(QueueSafeContext))]
    partial class QueueSafeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("QueueSafe.Entities.Address", b =>
                {
                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CityPostal")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("StreetName", "HouseNumber", "CityPostal");

                    b.HasIndex("CityPostal");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("QueueSafe.Entities.Booking", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Token");

                    b.HasIndex("StoreId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("QueueSafe.Entities.City", b =>
                {
                    b.Property<int>("Postal")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Postal");

                    b.ToTable("City");
                });

            modelBuilder.Entity("QueueSafe.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("QueueSafe.Entities.Address", b =>
                {
                    b.HasOne("QueueSafe.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityPostal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueueSafe.Entities.Store", "Store")
                        .WithOne("Address")
                        .HasForeignKey("QueueSafe.Entities.Address", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("QueueSafe.Entities.Booking", b =>
                {
                    b.HasOne("QueueSafe.Entities.Store", "Store")
                        .WithMany("Bookings")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("QueueSafe.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("QueueSafe.Entities.Store", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
